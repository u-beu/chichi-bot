name: Test

on:
  workflow_dispatch:
    inputs:
      env:
        description: "배포 옵션 선택"
        required: true
        default: 'prod'
        type: choice
        options:
          - init
          - prod
          - config

jobs:
  test:
    if: ${{ github.event.inputs.env != 'config' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Set pytest
        run: pip install pytest-asyncio

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Run unit tests
        run: pytest tests/
        
  build:
    needs: test
    if: ${{ github.event.inputs.env != 'config' }}
    runs-on: ubuntu-latest

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: .buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Build Docker image with Buildx and push Docker image to DockerHub
      run: |
        docker buildx build \
          --cache-from=type=local,src=.buildx-cache \
          --cache-to=type=local,dest=.buildx-cache \
          --push \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/chichi-bot:latest \
          .

  deploy-init:
    needs: build
    if: ${{ github.event.inputs.env == 'init' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> .env

      - name: Save EC2 private key
        run: |
          echo "${{ secrets.EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy files to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no -r \
              ./.env \
              ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            rm -rf /home/ubuntu/chichi-bot
            mkdir -p /home/ubuntu/chichi-bot
            mv ./.env /home/ubuntu/chichi-bot/
            cd /home/ubuntu/chichi-bot
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/chichi-bot:latest
            sudo docker run -d --name chichi-bot \
              --env-file .env \
              ${{ secrets.DOCKERHUB_USERNAME }}/chichi-bot:latest